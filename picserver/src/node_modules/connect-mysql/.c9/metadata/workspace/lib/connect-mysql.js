{"filter":false,"title":"connect-mysql.js","tooltip":"/lib/connect-mysql.js","undoManager":{"mark":30,"position":30,"stack":[[{"start":{"row":0,"column":0},"end":{"row":328,"column":2},"action":"remove","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, JSON.stringify(obj.pt));","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return obj.pt;","}","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","  util.inherits(MySQLStore, Store);","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","    set: function(val) {","      this.__pool = val;","    }","  });","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        //TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err, result) {","          if (result && result[0] && result[0].session) {","            try {","              var session = JSON.parse(result[0].session);","              console.log(secret)","              if (secret) {","                session = JSON.parse(decryptData(session, secret, this.algo));","              }","              ","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};"],"id":140},{"start":{"row":0,"column":0},"end":{"row":347,"column":0},"action":"insert","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;","    }","  });","","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = this.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","              var session = result[0].session;","","              if (secret) {","                session = decryptData(session, secret, this.algo);","              }","","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};",""]}],[{"start":{"row":288,"column":17},"end":{"row":288,"column":21},"action":"remove","lines":["this"],"id":141},{"start":{"row":288,"column":17},"end":{"row":288,"column":18},"action":"insert","lines":["s"]}],[{"start":{"row":288,"column":18},"end":{"row":288,"column":19},"action":"insert","lines":["e"],"id":142}],[{"start":{"row":288,"column":19},"end":{"row":288,"column":20},"action":"insert","lines":["l"],"id":143}],[{"start":{"row":288,"column":20},"end":{"row":288,"column":21},"action":"insert","lines":["f"],"id":144}],[{"start":{"row":187,"column":0},"end":{"row":188,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""],"id":145,"ignore":true},{"start":{"row":203,"column":0},"end":{"row":219,"column":24},"action":"remove","lines":["    }","  });","","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;"]},{"start":{"row":203,"column":0},"end":{"row":245,"column":48},"action":"insert","lines":["=======","    function encryptData(plaintext){","        var hmac = digest.call(this.secret, plaintext);","","        var obj = {","            hmac: hmac,","            pt: plaintext","        };","","        var ct = encrypt.call(this.secret, JSON.stringify(obj));","","        return ct;",">>>>>>> Crypto refactor to protect computed HMAC","    }","  });","","<<<<<<< HEAD","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;","=======","    function decryptData(ciphertext){","        var pt = decrypt.call(this.secret, ciphertext);","        var obj = JSON.parse(pt);","        var hmac = digest.call(this.secret, JSON.stringify(obj.pt));","","        if (hmac != obj.hmac) {","            throw 'Encrypted session was tampered with!';","        }","","        return obj.pt;",">>>>>>> Crypto refactor to protect computed HMAC"]},{"start":{"row":309,"column":0},"end":{"row":310,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""]},{"start":{"row":348,"column":0},"end":{"row":377,"column":0},"action":"insert","lines":["=======","    function digest(key, obj) {","        var hmac = this.crypto.createHmac('sha512', key);","        hmac.setEncoding('hex');","        hmac.write(obj);","        hmac.end();","        return hmac.read();","    }","","    function encrypt(key, pt, algo) {","        algo = algo || 'aes-256-ctr';","        pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","        var cipher = this.crypto.createCipher(algo, key), ct = [];","        ct.push(cipher.update(pt, 'buffer', 'hex'));","        ct.push(cipher.final('hex'));","","        return ct.join('');","    }","","    function decrypt(key, ct, algo) {","        algo = algo || 'aes-256-ctr';","        var cipher = this.crypto.createDecipher(algo, key), pt = [];","","        pt.push(cipher.update(ct, 'hex', 'utf8'));","        pt.push(cipher.final('utf8'));","","        return pt.join('');",">>>>>>> Crypto refactor to protect computed HMAC",""]},{"start":{"row":403,"column":2},"end":{"row":404,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":403,"column":2},"action":"remove","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","<<<<<<< HEAD","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","=======","    function encryptData(plaintext){","        var hmac = digest.call(this.secret, plaintext);","","        var obj = {","            hmac: hmac,","            pt: plaintext","        };","","        var ct = encrypt.call(this.secret, JSON.stringify(obj));","","        return ct;",">>>>>>> Crypto refactor to protect computed HMAC","    }","  });","","<<<<<<< HEAD","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;","=======","    function decryptData(ciphertext){","        var pt = decrypt.call(this.secret, ciphertext);","        var obj = JSON.parse(pt);","        var hmac = digest.call(this.secret, JSON.stringify(obj.pt));","","        if (hmac != obj.hmac) {","            throw 'Encrypted session was tampered with!';","        }","","        return obj.pt;",">>>>>>> Crypto refactor to protect computed HMAC","    }","  });","","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","<<<<<<< HEAD","    retry();","  };","","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","              var session = result[0].session;","","              if (secret) {","                session = decryptData(session, secret, this.algo);","              }","","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","=======","    function digest(key, obj) {","        var hmac = this.crypto.createHmac('sha512', key);","        hmac.setEncoding('hex');","        hmac.write(obj);","        hmac.end();","        return hmac.read();","    }","","    function encrypt(key, pt, algo) {","        algo = algo || 'aes-256-ctr';","        pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","        var cipher = this.crypto.createCipher(algo, key), ct = [];","        ct.push(cipher.update(pt, 'buffer', 'hex'));","        ct.push(cipher.final('hex'));","","        return ct.join('');","    }","","    function decrypt(key, ct, algo) {","        algo = algo || 'aes-256-ctr';","        var cipher = this.crypto.createDecipher(algo, key), pt = [];","","        pt.push(cipher.update(ct, 'hex', 'utf8'));","        pt.push(cipher.final('utf8'));","","        return pt.join('');",">>>>>>> Crypto refactor to protect computed HMAC","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};"],"id":149},{"start":{"row":0,"column":0},"end":{"row":346,"column":2},"action":"insert","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;","    }","  });","","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","              var session = result[0].session;","","              if (secret) {","                session = decryptData(session, secret, this.algo);","              }","","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};"]}],[{"start":{"row":7,"column":0},"end":{"row":10,"column":28},"action":"insert","lines":["<<<<<<< HEAD","","=======",">>>>>>> Version bump; v2.1.3"],"id":150,"ignore":true},{"start":{"row":21,"column":0},"end":{"row":22,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""]},{"start":{"row":205,"column":0},"end":{"row":298,"column":0},"action":"insert","lines":["=======","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, JSON.stringify(obj.pt));","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return obj.pt;","}","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;",">>>>>>> Version bump; v2.1.3",""]},{"start":{"row":303,"column":0},"end":{"row":304,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""]},{"start":{"row":315,"column":0},"end":{"row":409,"column":0},"action":"insert","lines":["=======","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName +","      '` WHERE `expires` > 0 and `expires` < UNIX_TIMESTAMP()';","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","  util.inherits(MySQLStore, Store);","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },",">>>>>>> Version bump; v2.1.3",""]},{"start":{"row":414,"column":0},"end":{"row":417,"column":28},"action":"insert","lines":["<<<<<<< HEAD","","=======",">>>>>>> Version bump; v2.1.3"]},{"start":{"row":425,"column":0},"end":{"row":428,"column":28},"action":"insert","lines":["<<<<<<< HEAD","","=======",">>>>>>> Version bump; v2.1.3"]},{"start":{"row":434,"column":0},"end":{"row":437,"column":28},"action":"insert","lines":["<<<<<<< HEAD","","=======",">>>>>>> Version bump; v2.1.3"]},{"start":{"row":449,"column":0},"end":{"row":452,"column":28},"action":"insert","lines":["<<<<<<< HEAD","","=======",">>>>>>> Version bump; v2.1.3"]},{"start":{"row":461,"column":0},"end":{"row":464,"column":28},"action":"insert","lines":["<<<<<<< HEAD","","=======",">>>>>>> Version bump; v2.1.3"]},{"start":{"row":485,"column":0},"end":{"row":486,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""]},{"start":{"row":487,"column":0},"end":{"row":490,"column":0},"action":"insert","lines":["=======","        //TODO: Use \"prevError\" to report an inner error (will require error lib?)",">>>>>>> Version bump; v2.1.3",""]},{"start":{"row":496,"column":0},"end":{"row":497,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""]},{"start":{"row":513,"column":0},"end":{"row":531,"column":0},"action":"insert","lines":["=======","  MySQLStore.prototype.get = function(sid, callback) {","    var secret = this.secret;","    self = this;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err, result) {","          if (result && result[0] && result[0].session) {","            try {","              var session = JSON.parse(result[0].session);","              ","              if (secret) {","                session = JSON.parse(session, secret, this.algo);","              }","              ",">>>>>>> Version bump; v2.1.3",""]},{"start":{"row":541,"column":0},"end":{"row":544,"column":28},"action":"insert","lines":["<<<<<<< HEAD","","=======",">>>>>>> Version bump; v2.1.3"]},{"start":{"row":566,"column":0},"end":{"row":569,"column":28},"action":"insert","lines":["<<<<<<< HEAD","","=======",">>>>>>> Version bump; v2.1.3"]},{"start":{"row":582,"column":0},"end":{"row":582,"column":2},"action":"remove","lines":["};"]},{"start":{"row":582,"column":0},"end":{"row":587,"column":0},"action":"insert","lines":["<<<<<<< HEAD","};","=======","};",">>>>>>> Version bump; v2.1.3",""]}],[{"start":{"row":0,"column":0},"end":{"row":587,"column":0},"action":"remove","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","<<<<<<< HEAD","","=======",">>>>>>> Version bump; v2.1.3","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","<<<<<<< HEAD","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","=======","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, JSON.stringify(obj.pt));","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return obj.pt;","}","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;",">>>>>>> Version bump; v2.1.3","      }","    }","  });","","","<<<<<<< HEAD","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","=======","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName +","      '` WHERE `expires` > 0 and `expires` < UNIX_TIMESTAMP()';","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","  util.inherits(MySQLStore, Store);","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },",">>>>>>> Version bump; v2.1.3","    set: function(val) {","      this.__pool = val;","    }","  });","","<<<<<<< HEAD","","=======",">>>>>>> Version bump; v2.1.3","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","<<<<<<< HEAD","","=======",">>>>>>> Version bump; v2.1.3","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","<<<<<<< HEAD","","=======",">>>>>>> Version bump; v2.1.3","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","<<<<<<< HEAD","","=======",">>>>>>> Version bump; v2.1.3","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","<<<<<<< HEAD","","=======",">>>>>>> Version bump; v2.1.3","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","<<<<<<< HEAD","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","=======","        //TODO: Use \"prevError\" to report an inner error (will require error lib?)",">>>>>>> Version bump; v2.1.3","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","<<<<<<< HEAD","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","              var session = result[0].session;","","              if (secret) {","                session = decryptData(session, secret, this.algo);","              }","","=======","  MySQLStore.prototype.get = function(sid, callback) {","    var secret = this.secret;","    self = this;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err, result) {","          if (result && result[0] && result[0].session) {","            try {","              var session = JSON.parse(result[0].session);","              ","              if (secret) {","                session = JSON.parse(session, secret, this.algo);","              }","              ",">>>>>>> Version bump; v2.1.3","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","<<<<<<< HEAD","","=======",">>>>>>> Version bump; v2.1.3","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","<<<<<<< HEAD","","=======",">>>>>>> Version bump; v2.1.3","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","<<<<<<< HEAD","};","=======","};",">>>>>>> Version bump; v2.1.3",""],"id":151},{"start":{"row":0,"column":0},"end":{"row":346,"column":2},"action":"insert","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;","    }","  });","","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","              var session = result[0].session;","","              if (secret) {","                session = decryptData(session, secret, this.algo);","              }","","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};"]}],[{"start":{"row":7,"column":0},"end":{"row":10,"column":40},"action":"insert","lines":["<<<<<<< HEAD","","=======",">>>>>>> Dependency update & version bump"],"id":152,"ignore":true},{"start":{"row":21,"column":0},"end":{"row":22,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""]},{"start":{"row":205,"column":0},"end":{"row":298,"column":0},"action":"insert","lines":["=======","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, JSON.stringify(obj.pt));","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return obj.pt;","}","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;",">>>>>>> Dependency update & version bump",""]},{"start":{"row":303,"column":0},"end":{"row":304,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""]},{"start":{"row":315,"column":0},"end":{"row":409,"column":0},"action":"insert","lines":["=======","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName +","      '` WHERE `expires` > 0 and `expires` < UNIX_TIMESTAMP()';","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","  util.inherits(MySQLStore, Store);","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },",">>>>>>> Dependency update & version bump",""]},{"start":{"row":414,"column":0},"end":{"row":417,"column":40},"action":"insert","lines":["<<<<<<< HEAD","","=======",">>>>>>> Dependency update & version bump"]},{"start":{"row":425,"column":0},"end":{"row":428,"column":40},"action":"insert","lines":["<<<<<<< HEAD","","=======",">>>>>>> Dependency update & version bump"]},{"start":{"row":434,"column":0},"end":{"row":437,"column":40},"action":"insert","lines":["<<<<<<< HEAD","","=======",">>>>>>> Dependency update & version bump"]},{"start":{"row":449,"column":0},"end":{"row":452,"column":40},"action":"insert","lines":["<<<<<<< HEAD","","=======",">>>>>>> Dependency update & version bump"]},{"start":{"row":461,"column":0},"end":{"row":464,"column":40},"action":"insert","lines":["<<<<<<< HEAD","","=======",">>>>>>> Dependency update & version bump"]},{"start":{"row":485,"column":0},"end":{"row":486,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""]},{"start":{"row":487,"column":0},"end":{"row":490,"column":0},"action":"insert","lines":["=======","        //TODO: Use \"prevError\" to report an inner error (will require error lib?)",">>>>>>> Dependency update & version bump",""]},{"start":{"row":496,"column":0},"end":{"row":497,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""]},{"start":{"row":513,"column":0},"end":{"row":531,"column":0},"action":"insert","lines":["=======","  MySQLStore.prototype.get = function(sid, callback) {","    var secret = this.secret;","    self = this;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err, result) {","          if (result && result[0] && result[0].session) {","            try {","              var session = JSON.parse(result[0].session);","              ","              if (secret) {","                session = JSON.parse(session, secret, this.algo);","              }","              ",">>>>>>> Dependency update & version bump",""]},{"start":{"row":541,"column":0},"end":{"row":544,"column":40},"action":"insert","lines":["<<<<<<< HEAD","","=======",">>>>>>> Dependency update & version bump"]},{"start":{"row":566,"column":0},"end":{"row":569,"column":40},"action":"insert","lines":["<<<<<<< HEAD","","=======",">>>>>>> Dependency update & version bump"]},{"start":{"row":582,"column":0},"end":{"row":582,"column":2},"action":"remove","lines":["};"]},{"start":{"row":582,"column":0},"end":{"row":587,"column":0},"action":"insert","lines":["<<<<<<< HEAD","};","=======","};",">>>>>>> Dependency update & version bump",""]}],[{"start":{"row":0,"column":0},"end":{"row":587,"column":0},"action":"remove","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","<<<<<<< HEAD","","=======",">>>>>>> Dependency update & version bump","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","<<<<<<< HEAD","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","=======","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, JSON.stringify(obj.pt));","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return obj.pt;","}","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;",">>>>>>> Dependency update & version bump","      }","    }","  });","","","<<<<<<< HEAD","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","=======","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName +","      '` WHERE `expires` > 0 and `expires` < UNIX_TIMESTAMP()';","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","  util.inherits(MySQLStore, Store);","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },",">>>>>>> Dependency update & version bump","    set: function(val) {","      this.__pool = val;","    }","  });","","<<<<<<< HEAD","","=======",">>>>>>> Dependency update & version bump","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","<<<<<<< HEAD","","=======",">>>>>>> Dependency update & version bump","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","<<<<<<< HEAD","","=======",">>>>>>> Dependency update & version bump","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","<<<<<<< HEAD","","=======",">>>>>>> Dependency update & version bump","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","<<<<<<< HEAD","","=======",">>>>>>> Dependency update & version bump","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","<<<<<<< HEAD","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","=======","        //TODO: Use \"prevError\" to report an inner error (will require error lib?)",">>>>>>> Dependency update & version bump","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","<<<<<<< HEAD","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","              var session = result[0].session;","","              if (secret) {","                session = decryptData(session, secret, this.algo);","              }","","=======","  MySQLStore.prototype.get = function(sid, callback) {","    var secret = this.secret;","    self = this;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err, result) {","          if (result && result[0] && result[0].session) {","            try {","              var session = JSON.parse(result[0].session);","              ","              if (secret) {","                session = JSON.parse(session, secret, this.algo);","              }","              ",">>>>>>> Dependency update & version bump","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","<<<<<<< HEAD","","=======",">>>>>>> Dependency update & version bump","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","<<<<<<< HEAD","","=======",">>>>>>> Dependency update & version bump","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","<<<<<<< HEAD","};","=======","};",">>>>>>> Dependency update & version bump",""],"id":153},{"start":{"row":0,"column":0},"end":{"row":346,"column":2},"action":"insert","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;","    }","  });","","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","              var session = result[0].session;","","              if (secret) {","                session = decryptData(session, secret, this.algo);","              }","","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};"]}],[{"start":{"row":298,"column":0},"end":{"row":299,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""],"id":154,"ignore":true},{"start":{"row":300,"column":0},"end":{"row":303,"column":0},"action":"insert","lines":["=======","                session = JSON.parse(decryptData(session, secret, this.algo));",">>>>>>> emergency fix",""]}],[{"start":{"row":0,"column":0},"end":{"row":350,"column":2},"action":"remove","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;","    }","  });","","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","              var session = result[0].session;","","              if (secret) {","<<<<<<< HEAD","                session = decryptData(session, secret, this.algo);","=======","                session = JSON.parse(decryptData(session, secret, this.algo));",">>>>>>> emergency fix","              }","","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};"],"id":155},{"start":{"row":0,"column":0},"end":{"row":346,"column":2},"action":"insert","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;","    }","  });","","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","              var session = result[0].session;","","              if (secret) {","                session = decryptData(session, secret, this.algo);","              }","","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};"]}],[{"start":{"row":295,"column":0},"end":{"row":296,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""],"id":156,"ignore":true},{"start":{"row":300,"column":0},"end":{"row":309,"column":0},"action":"insert","lines":["=======","              var session;","              ","              if (secret) {","                session = JSON.parse(decryptData(result[0].session, secret,","                  this.algo));","              } else {","                session = JSON.parse(result[0].session);",">>>>>>> Fix for #34",""]}],[{"start":{"row":0,"column":0},"end":{"row":356,"column":2},"action":"remove","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;","    }","  });","","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","<<<<<<< HEAD","              var session = result[0].session;","","              if (secret) {","                session = decryptData(session, secret, this.algo);","=======","              var session;","              ","              if (secret) {","                session = JSON.parse(decryptData(result[0].session, secret,","                  this.algo));","              } else {","                session = JSON.parse(result[0].session);",">>>>>>> Fix for #34","              }","","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};"],"id":157},{"start":{"row":0,"column":0},"end":{"row":346,"column":2},"action":"insert","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;","    }","  });","","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","              var session = result[0].session;","","              if (secret) {","                session = decryptData(session, secret, this.algo);","              }","","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};"]}],[{"start":{"row":77,"column":0},"end":{"row":78,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""],"id":158,"ignore":true},{"start":{"row":220,"column":0},"end":{"row":264,"column":0},"action":"insert","lines":["=======","    function encryptData(plaintext){","        var hmac = digest.call(this.secret, plaintext);","","        var obj = {","            hmac: hmac,","            pt: plaintext","        };","","        var ct = encrypt.call(this.secret, JSON.stringify(obj));","","        return ct;","    }","","    function decryptData(ciphertext){","        var pt = decrypt.call(this.secret, ciphertext);","        var obj = JSON.parse(pt);","        var hmac = digest.call(this.secret, JSON.stringify(obj.pt));","","        if (hmac != obj.hmac) {","            throw 'Encrypted session was tampered with!';","        }","","        return obj.pt;","    }","","    function digest(key, obj) {","        var hmac = this.crypto.createHmac('sha512', key);","        hmac.setEncoding('hex');","        hmac.write(obj);","        hmac.end();","        return hmac.read();","    }","","    function encrypt(key, pt, algo) {","        algo = algo || 'aes-256-ctr';","        pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","        var cipher = this.crypto.createCipher(algo, key), ct = [];","        ct.push(cipher.update(pt, 'buffer', 'hex'));","        ct.push(cipher.final('hex'));","","        return ct.join('');",">>>>>>> Crypto refactor to protect computed HMAC",""]},{"start":{"row":340,"column":0},"end":{"row":341,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""]},{"start":{"row":345,"column":0},"end":{"row":353,"column":0},"action":"insert","lines":["=======","              var session;","              ","              if (secret) {","                session = JSON.parse(result[0].session, secret, this.algo);","              } else {","                session = JSON.parse(result[0].session);",">>>>>>> Crypto refactor to protect computed HMAC",""]}],[{"start":{"row":0,"column":0},"end":{"row":400,"column":2},"action":"remove","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","<<<<<<< HEAD","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;","=======","    function encryptData(plaintext){","        var hmac = digest.call(this.secret, plaintext);","","        var obj = {","            hmac: hmac,","            pt: plaintext","        };","","        var ct = encrypt.call(this.secret, JSON.stringify(obj));","","        return ct;","    }","","    function decryptData(ciphertext){","        var pt = decrypt.call(this.secret, ciphertext);","        var obj = JSON.parse(pt);","        var hmac = digest.call(this.secret, JSON.stringify(obj.pt));","","        if (hmac != obj.hmac) {","            throw 'Encrypted session was tampered with!';","        }","","        return obj.pt;","    }","","    function digest(key, obj) {","        var hmac = this.crypto.createHmac('sha512', key);","        hmac.setEncoding('hex');","        hmac.write(obj);","        hmac.end();","        return hmac.read();","    }","","    function encrypt(key, pt, algo) {","        algo = algo || 'aes-256-ctr';","        pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","        var cipher = this.crypto.createCipher(algo, key), ct = [];","        ct.push(cipher.update(pt, 'buffer', 'hex'));","        ct.push(cipher.final('hex'));","","        return ct.join('');",">>>>>>> Crypto refactor to protect computed HMAC","    }","  });","","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","<<<<<<< HEAD","              var session = result[0].session;","","              if (secret) {","                session = decryptData(session, secret, this.algo);","=======","              var session;","              ","              if (secret) {","                session = JSON.parse(result[0].session, secret, this.algo);","              } else {","                session = JSON.parse(result[0].session);",">>>>>>> Crypto refactor to protect computed HMAC","              }","","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};"],"id":159},{"start":{"row":0,"column":0},"end":{"row":346,"column":2},"action":"insert","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;","    }","  });","","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","              var session = result[0].session;","","              if (secret) {","                session = decryptData(session, secret, this.algo);","              }","","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};"]}],[{"start":{"row":75,"column":32},"end":{"row":76,"column":12},"action":"insert","lines":["","<<<<<<< HEAD"],"id":160,"ignore":true},{"start":{"row":220,"column":0},"end":{"row":363,"column":0},"action":"insert","lines":["<<<<<<< HEAD","=======","=======","    function encryptData(plaintext){","        var hmac = digest.call(this.secret, plaintext);","=======","","  return pt.join('');","}",">>>>>>> Version bump; v2.1.3","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName +","      '` WHERE `expires` > 0 and `expires` < UNIX_TIMESTAMP()';","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","  util.inherits(MySQLStore, Store);","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","    set: function(val) {","      this.__pool = val;",">>>>>>> Version bump; v2.1.3",""]},{"start":{"row":439,"column":0},"end":{"row":440,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""]},{"start":{"row":444,"column":0},"end":{"row":459,"column":0},"action":"insert","lines":["=======","<<<<<<< HEAD","              var session;","              ","              if (secret) {","                session = JSON.parse(result[0].session, secret, this.algo);","              } else {","                session = JSON.parse(result[0].session);","=======","              var session = JSON.parse(result[0].session);","              ","              if (secret) {","                session = JSON.parse(session, secret, this.algo);",">>>>>>> Version bump; v2.1.3",">>>>>>> Version bump; v2.1.3",""]}],[{"start":{"row":0,"column":0},"end":{"row":506,"column":2},"action":"remove","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","<<<<<<< HEAD","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;","<<<<<<< HEAD","=======","=======","    function encryptData(plaintext){","        var hmac = digest.call(this.secret, plaintext);","=======","","  return pt.join('');","}",">>>>>>> Version bump; v2.1.3","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName +","      '` WHERE `expires` > 0 and `expires` < UNIX_TIMESTAMP()';","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","  util.inherits(MySQLStore, Store);","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","    set: function(val) {","      this.__pool = val;",">>>>>>> Version bump; v2.1.3","    }","  });","","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","<<<<<<< HEAD","              var session = result[0].session;","","              if (secret) {","                session = decryptData(session, secret, this.algo);","=======","<<<<<<< HEAD","              var session;","              ","              if (secret) {","                session = JSON.parse(result[0].session, secret, this.algo);","              } else {","                session = JSON.parse(result[0].session);","=======","              var session = JSON.parse(result[0].session);","              ","              if (secret) {","                session = JSON.parse(session, secret, this.algo);",">>>>>>> Version bump; v2.1.3",">>>>>>> Version bump; v2.1.3","              }","","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};"],"id":161},{"start":{"row":0,"column":0},"end":{"row":346,"column":2},"action":"insert","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;","    }","  });","","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","              var session = result[0].session;","","              if (secret) {","                session = decryptData(session, secret, this.algo);","              }","","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};"]}],[{"start":{"row":184,"column":0},"end":{"row":185,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""],"id":162,"ignore":true},{"start":{"row":189,"column":0},"end":{"row":193,"column":0},"action":"insert","lines":["=======","  util.inherits(MySQLStore, Store);","",">>>>>>> Dependency update & version bump",""]},{"start":{"row":210,"column":0},"end":{"row":213,"column":40},"action":"insert","lines":["<<<<<<< HEAD","","=======",">>>>>>> Dependency update & version bump"]},{"start":{"row":224,"column":0},"end":{"row":227,"column":40},"action":"insert","lines":["<<<<<<< HEAD","","=======",">>>>>>> Dependency update & version bump"]},{"start":{"row":306,"column":0},"end":{"row":307,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""]},{"start":{"row":311,"column":0},"end":{"row":317,"column":0},"action":"insert","lines":["=======","              var session = JSON.parse(result[0].session);","              ","              if (secret) {","                session = JSON.parse(session, secret, this.algo);",">>>>>>> Dependency update & version bump",""]}],[{"start":{"row":0,"column":0},"end":{"row":364,"column":2},"action":"remove","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","<<<<<<< HEAD","","  util.inherits(MySQLStore, Store);","","","=======","  util.inherits(MySQLStore, Store);","",">>>>>>> Dependency update & version bump","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","<<<<<<< HEAD","","=======",">>>>>>> Dependency update & version bump","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","<<<<<<< HEAD","","=======",">>>>>>> Dependency update & version bump","    set: function(val) {","      this.__pool = val;","    }","  });","","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","<<<<<<< HEAD","              var session = result[0].session;","","              if (secret) {","                session = decryptData(session, secret, this.algo);","=======","              var session = JSON.parse(result[0].session);","              ","              if (secret) {","                session = JSON.parse(session, secret, this.algo);",">>>>>>> Dependency update & version bump","              }","","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};"],"id":163},{"start":{"row":0,"column":0},"end":{"row":346,"column":2},"action":"insert","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;","    }","  });","","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","              var session = result[0].session;","","              if (secret) {","                session = decryptData(session, secret, this.algo);","              }","","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};"]}],[{"start":{"row":298,"column":0},"end":{"row":299,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""],"id":164,"ignore":true},{"start":{"row":300,"column":0},"end":{"row":303,"column":0},"action":"insert","lines":["=======","                session = JSON.parse(decryptData(session, secret, this.algo));",">>>>>>> emergency fix",""]}],[{"start":{"row":0,"column":0},"end":{"row":350,"column":2},"action":"remove","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;","    }","  });","","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","              var session = result[0].session;","","              if (secret) {","<<<<<<< HEAD","                session = decryptData(session, secret, this.algo);","=======","                session = JSON.parse(decryptData(session, secret, this.algo));",">>>>>>> emergency fix","              }","","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};"],"id":165},{"start":{"row":0,"column":0},"end":{"row":346,"column":2},"action":"insert","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;","    }","  });","","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","              var session = result[0].session;","","              if (secret) {","                session = decryptData(session, secret, this.algo);","              }","","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};"]}],[{"start":{"row":295,"column":0},"end":{"row":296,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""],"id":166,"ignore":true},{"start":{"row":300,"column":0},"end":{"row":309,"column":0},"action":"insert","lines":["=======","              var session;","              ","              if (secret) {","                session = JSON.parse(decryptData(result[0].session, secret,","                  this.algo));","              } else {","                session = JSON.parse(result[0].session);",">>>>>>> Fix for #34",""]}],[{"start":{"row":0,"column":0},"end":{"row":356,"column":2},"action":"remove","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;","    }","  });","","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","<<<<<<< HEAD","              var session = result[0].session;","","              if (secret) {","                session = decryptData(session, secret, this.algo);","=======","              var session;","              ","              if (secret) {","                session = JSON.parse(decryptData(result[0].session, secret,","                  this.algo));","              } else {","                session = JSON.parse(result[0].session);",">>>>>>> Fix for #34","              }","","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};"],"id":167},{"start":{"row":0,"column":0},"end":{"row":346,"column":2},"action":"insert","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;","    }","  });","","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","              var session = result[0].session;","","              if (secret) {","                session = decryptData(session, secret, this.algo);","              }","","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};"]}],[{"start":{"row":298,"column":0},"end":{"row":299,"column":0},"action":"insert","lines":["<<<<<<< HEAD",""],"id":169,"ignore":true},{"start":{"row":300,"column":0},"end":{"row":303,"column":0},"action":"insert","lines":["=======","                session = JSON.parse(decryptData(session, secret, this.algo));",">>>>>>> Version bump; v2.1.5",""]}],[{"start":{"row":298,"column":0},"end":{"row":299,"column":0},"action":"remove","lines":["<<<<<<< HEAD",""],"id":170,"ignore":true},{"start":{"row":299,"column":0},"end":{"row":302,"column":0},"action":"remove","lines":["=======","                session = JSON.parse(decryptData(session, secret, this.algo));",">>>>>>> Version bump; v2.1.5",""]}],[{"start":{"row":346,"column":2},"end":{"row":347,"column":0},"action":"insert","lines":["",""],"id":171,"ignore":true}],[{"start":{"row":0,"column":0},"end":{"row":347,"column":0},"action":"remove","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return JSON.parse(obj.pt);","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;","    }","  });","","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","              var session = result[0].session;","","              if (secret) {","                session = decryptData(session, secret, this.algo);","              }","","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};",""],"id":172},{"start":{"row":0,"column":0},"end":{"row":349,"column":0},"action":"insert","lines":["/*!"," * connect-mysql"," * Author: Nathan LaFreniere <nlf@andyet.net>"," */","","var util = require('util');","var crypto = require('crypto');","","","function isFunction(obj) {","  return Object.prototype.toString.call(obj) == '[object Function]';","}","","","function isNumber(obj) {","  return Object.prototype.toString.call(obj) == '[object Number]';","}","","","function encryptData(plaintext, secret, algo) {","  var hmac = digest(secret, plaintext);","","  var obj = {","    hmac: hmac,","    pt: plaintext","  };","","  var ct = encrypt(secret, JSON.stringify(obj), algo);","","  return ct;","}","","","function decryptData(ciphertext, secret) {","  var pt = decrypt(secret, ciphertext);","  var obj = JSON.parse(pt);","  var hmac = digest(secret, obj.pt);","","  if (hmac != obj.hmac) {","    throw 'Encrypted session was tampered with!';","  }","","  return obj.pt;","}","","","function digest(key, obj) {","  var hmac = crypto.createHmac('sha512', key);","  hmac.setEncoding('hex');","  hmac.write(obj);","  hmac.end();","  return hmac.read();","}","","","function encrypt(key, pt, algo) {","  algo = algo || 'aes-256-ctr';","  pt = (Buffer.isBuffer(pt)) ? pt : new Buffer(pt);","","  var cipher = crypto.createCipher(algo, key);","  var ct = [];","","  ct.push(cipher.update(pt, 'buffer', 'hex'));","  ct.push(cipher.final('hex'));","","  return ct.join('');","}","","","function decrypt(key, ct, algo) {","  algo = algo || 'aes-256-ctr';","  var cipher = crypto.createDecipher(algo, key);","  var pt = [];","","  pt.push(cipher.update(ct, 'hex', 'utf8'));","  pt.push(cipher.final('utf8'));","","  return pt.join('');","}","","","module.exports = function(connect) {","  var Store = connect.Store || connect.session.Store,","      TableName = 'sessions';","","  function MySQLStore(options) {","    var cleanup = true,","        heartbeat = 30000;","","    Store.call(this, options);","","    if (options.hasOwnProperty('cleanup'))","      cleanup = options.cleanup;","","    if (options.hasOwnProperty('table'))","      TableName = options.table;","","    if (options.hasOwnProperty('retries'))","      this.numRetries = options.retries;","","    if (options.hasOwnProperty('secret')) {","      this.secret = options.secret;","","      if (options.hasOwnProperty('algorithm'))","        this.algorithm = options.algorithm || 'aes-256-ctr';","    }","","    if (options.hasOwnProperty('pool')) {","      var pool = options.pool;","      if (isFunction(pool.getConnection)) {","        this.usePool = true;","        this.pool = pool;","      } else if (pool === true) {","        this.usePool = true;","      }","    }","","    if (options.hasOwnProperty('keepalive')) {","      var keepalive = options.keepalive;","      if (isNumber(keepalive)) {","        heartbeat = keepalive;","      } else if (!keepalive) {","        heartbeat = -1;","      }","    }","","    this.config = options.config;","","    if (this.usePool && heartbeat > 0) {","      var keepAlive = function keepAlive() {","        this.query(function(connection, done) {","          connection.ping();","          done();","        }, function noop() {});","      }.bind(this);","","      setInterval(keepAlive, heartbeat);","    }","","    var cleanupQuery = 'DELETE FROM `' + TableName + '` WHERE id IN (' +","      'SELECT temp.id FROM (' +","        'SELECT `id` FROM `' + TableName + '` WHERE `expires` > 0 AND `expires` < UNIX_TIMESTAMP()' +","      ') AS temp' +","    ');'","","    var nodeCleanup = function() {","      this.query(function(connection, done) {","        connection.query(cleanupQuery, function(err) {","          done(err);","        });","      }, function noop() {});","    }.bind(this);","","    this.query(function(connection, done) {","      connection.query('CREATE TABLE IF NOT EXISTS `' + TableName +","        '` (`sid` VARCHAR(255) NOT NULL, `session` TEXT NOT NULL, `expires` INT, PRIMARY KEY (`sid`) ) CHARACTER SET utf8 COLLATE utf8_unicode_ci',","        function(err) {","          if (err) done(err);","          else if (cleanup) {","            connection.query('SET GLOBAL event_scheduler = 1', function(","              err) {","              if (err) {","                if (err.code !== 'ER_SPECIFIC_ACCESS_DENIED_ERROR')","                  done(err);","                else {","                  setInterval(nodeCleanup, 900000);","                  done();","                }","              } else {","                connection.query(","                  'CREATE EVENT IF NOT EXISTS `sess_cleanup` ON SCHEDULE EVERY 15 MINUTE DO ' +","                  cleanupQuery,","                  function(err) {","                    done(err);","                  });","              }","            });","          } else done();","        });","    }, function(err) {","      if (err) throw err;","    });","  }","","","  util.inherits(MySQLStore, Store);","","","  Object.defineProperty(MySQLStore.prototype, 'mysql', {","    get: function() {","      if (this.__mysql) return this.__mysql;","      else {","        var mysql = null;","        try {","          mysql = require('mysql');","          this.__mysql = mysql;","        } catch (err) {","          throw new Error('mysql module is not installed!');","        }","","        return mysql;","      }","    }","  });","","","  Object.defineProperty(MySQLStore.prototype, 'pool', {","    get: function() {","      if (this.__pool) return this.__pool;","      else {","        var pool = this.mysql.createPool(this.config);","        this.__pool = pool;","","        return pool;","      }","    },","","    set: function(val) {","      this.__pool = val;","    }","  });","","","  MySQLStore.prototype.query = function(query, callback) {","    var usePool = this.usePool,","      pool = this.pool,","      config = this.config,","      mysql = this.mysql,","      tries = 0,","      maxTries = (this.numRetries || 3) + 1,","","      error = function(err) {","        if (err.code === 'PROTOCOL_CONNECTION_LOST') {","          retry();","        } else callback(err);","      },","","      release = function(connection) {","        return function(err, value) {","          connection.removeListener('error', error);","          if (err) callback(err);","          else {","            if (usePool) connection.release();","            else connection.end();","            if (typeof callback === 'function') callback(null, value);","          }","        };","      },","","      execute = function(connection) {","        connection.on('error', error);","        try {","          query(connection, release(connection));","        } catch (err) {","          retry();","        }","      },","","      retry = function(prevErr) {","        if (tries < maxTries) {","          tries++;","          try {","            if (usePool) {","              pool.getConnection(function(err, connection) {","                if (err) callback(err);","                else execute(connection);","              });","            } else {","              var connection = mysql.createConnection(config);","              connection.connect(function(err) {","                if (err) callback(err);","                else execute(connection);","              });","            }","          } catch (err) {","            retry(err);","          }","        }","        // TODO: Use \"prevError\" to report an inner error (will require error lib?)","        else callback(new Error(\"Connection failed too many times in a row\"));","      };","","    retry();","  };","","","  MySQLStore.prototype.get = function(sid, callback) {","    var self = this;","    var secret = self.secret;","","    this.query(function(connection, done) {","      connection.query('SELECT `session` FROM `' + TableName + '` WHERE `sid` = ?', [sid], function(err, result) {","","          if (result && result[0] && result[0].session) {","            try {","              var session = result[0].session;","","              if (secret) {","                session = decryptData(session, secret, this.algo);","              }","","              session = JSON.parse(session);","","              done(null, session);","            } catch (cryptoErr) {","              done(cryptoErr);","            }","          } else {","            done(err);","          }","        });","    }, callback);","  };","","","  MySQLStore.prototype.set = function(sid, session, callback) {","    var expires = new Date(session.cookie.expires).getTime() / 1000;","","    session = JSON.stringify(session);","","    if (this.secret) {","      session = encryptData(session, this.secret, this.algorithm);","    }","","    this.query(function(connection, done) {","      connection.query('INSERT INTO `' + TableName +","        '` (`sid`, `session`, `expires`) VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE `session` = ?, `expires` = ?', [","          sid, session, expires, session, expires","        ],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  MySQLStore.prototype.destroy = function(sid, callback) {","    this.query(function(connection, done) {","      connection.query('DELETE FROM `' + TableName +","        '` WHERE `sid` = ?', [sid],","        function(err) {","          done(err);","        });","    }, callback);","  };","","","  return MySQLStore;","};",""]}],[{"start":{"row":8,"column":0},"end":{"row":9,"column":0},"action":"remove","lines":["",""],"id":173,"ignore":true},{"start":{"row":12,"column":0},"end":{"row":13,"column":0},"action":"remove","lines":["",""]},{"start":{"row":16,"column":0},"end":{"row":17,"column":0},"action":"remove","lines":["",""]},{"start":{"row":29,"column":0},"end":{"row":30,"column":0},"action":"remove","lines":["",""]},{"start":{"row":32,"column":28},"end":{"row":32,"column":43},"action":"insert","lines":["JSON.stringify("]},{"start":{"row":32,"column":50},"end":{"row":32,"column":51},"action":"insert","lines":[")"]},{"start":{"row":41,"column":0},"end":{"row":42,"column":0},"action":"remove","lines":["",""]},{"start":{"row":49,"column":0},"end":{"row":50,"column":0},"action":"remove","lines":["",""]},{"start":{"row":62,"column":0},"end":{"row":63,"column":0},"action":"remove","lines":["",""]},{"start":{"row":177,"column":0},"end":{"row":178,"column":0},"action":"remove","lines":["",""]},{"start":{"row":179,"column":0},"end":{"row":180,"column":0},"action":"remove","lines":["",""]},{"start":{"row":196,"column":0},"end":{"row":197,"column":0},"action":"remove","lines":["",""]},{"start":{"row":206,"column":0},"end":{"row":207,"column":0},"action":"remove","lines":["",""]},{"start":{"row":211,"column":0},"end":{"row":212,"column":0},"action":"remove","lines":["",""]},{"start":{"row":218,"column":0},"end":{"row":219,"column":0},"action":"remove","lines":["",""]},{"start":{"row":223,"column":0},"end":{"row":224,"column":0},"action":"remove","lines":["",""]},{"start":{"row":234,"column":0},"end":{"row":235,"column":0},"action":"remove","lines":["",""]},{"start":{"row":242,"column":0},"end":{"row":243,"column":0},"action":"remove","lines":["",""]},{"start":{"row":262,"column":10},"end":{"row":262,"column":11},"action":"remove","lines":[" "]},{"start":{"row":269,"column":0},"end":{"row":270,"column":0},"action":"remove","lines":["",""]},{"start":{"row":270,"column":10},"end":{"row":270,"column":12},"action":"remove","lines":["lf"]},{"start":{"row":270,"column":10},"end":{"row":270,"column":14},"action":"insert","lines":["cret"]},{"start":{"row":270,"column":21},"end":{"row":271,"column":28},"action":"remove","lines":[";","    var secret = self.secret"]},{"start":{"row":270,"column":21},"end":{"row":271,"column":15},"action":"insert","lines":[".secret;","    self = this"]},{"start":{"row":274,"column":62},"end":{"row":275,"column":7},"action":"insert","lines":["","       "]},{"start":{"row":275,"column":35},"end":{"row":276,"column":7},"action":"insert","lines":["","       "]},{"start":{"row":277,"column":0},"end":{"row":278,"column":0},"action":"remove","lines":["",""]},{"start":{"row":279,"column":28},"end":{"row":279,"column":39},"action":"insert","lines":["JSON.parse("]},{"start":{"row":279,"column":56},"end":{"row":279,"column":57},"action":"insert","lines":[")"]},{"start":{"row":280,"column":0},"end":{"row":280,"column":14},"action":"insert","lines":["              "]},{"start":{"row":282,"column":26},"end":{"row":282,"column":37},"action":"remove","lines":["decryptData"]},{"start":{"row":282,"column":26},"end":{"row":282,"column":36},"action":"insert","lines":["JSON.parse"]},{"start":{"row":284,"column":0},"end":{"row":285,"column":0},"action":"remove","lines":["",""]},{"start":{"row":284,"column":14},"end":{"row":285,"column":0},"action":"remove","lines":["session = JSON.parse(session);",""]},{"start":{"row":296,"column":0},"end":{"row":297,"column":0},"action":"remove","lines":["",""]},{"start":{"row":316,"column":0},"end":{"row":317,"column":0},"action":"remove","lines":["",""]},{"start":{"row":328,"column":2},"end":{"row":329,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":8,"column":0},"end":{"row":9,"column":0},"action":"insert","lines":["",""],"id":174,"ignore":true},{"start":{"row":13,"column":0},"end":{"row":14,"column":0},"action":"insert","lines":["",""]},{"start":{"row":18,"column":0},"end":{"row":19,"column":0},"action":"insert","lines":["",""]},{"start":{"row":32,"column":0},"end":{"row":33,"column":0},"action":"insert","lines":["",""]},{"start":{"row":36,"column":28},"end":{"row":36,"column":43},"action":"remove","lines":["JSON.stringify("]},{"start":{"row":36,"column":35},"end":{"row":36,"column":36},"action":"remove","lines":[")"]},{"start":{"row":45,"column":0},"end":{"row":46,"column":0},"action":"insert","lines":["",""]},{"start":{"row":54,"column":0},"end":{"row":55,"column":0},"action":"insert","lines":["",""]},{"start":{"row":68,"column":0},"end":{"row":69,"column":0},"action":"insert","lines":["",""]},{"start":{"row":184,"column":0},"end":{"row":185,"column":0},"action":"insert","lines":["",""]},{"start":{"row":187,"column":0},"end":{"row":188,"column":0},"action":"insert","lines":["",""]},{"start":{"row":205,"column":0},"end":{"row":206,"column":0},"action":"insert","lines":["",""]},{"start":{"row":216,"column":0},"end":{"row":217,"column":0},"action":"insert","lines":["",""]},{"start":{"row":222,"column":0},"end":{"row":223,"column":0},"action":"insert","lines":["",""]},{"start":{"row":230,"column":0},"end":{"row":231,"column":0},"action":"insert","lines":["",""]},{"start":{"row":236,"column":0},"end":{"row":237,"column":0},"action":"insert","lines":["",""]},{"start":{"row":248,"column":0},"end":{"row":249,"column":0},"action":"insert","lines":["",""]},{"start":{"row":257,"column":0},"end":{"row":258,"column":0},"action":"insert","lines":["",""]},{"start":{"row":278,"column":10},"end":{"row":278,"column":11},"action":"insert","lines":[" "]},{"start":{"row":285,"column":0},"end":{"row":286,"column":0},"action":"insert","lines":["",""]},{"start":{"row":287,"column":10},"end":{"row":287,"column":14},"action":"remove","lines":["cret"]},{"start":{"row":287,"column":10},"end":{"row":287,"column":12},"action":"insert","lines":["lf"]},{"start":{"row":287,"column":19},"end":{"row":288,"column":15},"action":"remove","lines":[".secret;","    self = this"]},{"start":{"row":287,"column":19},"end":{"row":288,"column":28},"action":"insert","lines":[";","    var secret = self.secret"]},{"start":{"row":291,"column":62},"end":{"row":292,"column":7},"action":"remove","lines":["","       "]},{"start":{"row":291,"column":90},"end":{"row":292,"column":7},"action":"remove","lines":["","       "]},{"start":{"row":292,"column":0},"end":{"row":293,"column":0},"action":"insert","lines":["",""]},{"start":{"row":295,"column":28},"end":{"row":295,"column":39},"action":"remove","lines":["JSON.parse("]},{"start":{"row":295,"column":45},"end":{"row":295,"column":46},"action":"remove","lines":[")"]},{"start":{"row":296,"column":0},"end":{"row":296,"column":14},"action":"remove","lines":["              "]},{"start":{"row":298,"column":26},"end":{"row":298,"column":36},"action":"remove","lines":["JSON.parse"]},{"start":{"row":298,"column":26},"end":{"row":298,"column":37},"action":"insert","lines":["decryptData"]},{"start":{"row":300,"column":0},"end":{"row":301,"column":0},"action":"insert","lines":["",""]},{"start":{"row":301,"column":14},"end":{"row":302,"column":0},"action":"insert","lines":["session = JSON.parse(session);",""]},{"start":{"row":314,"column":0},"end":{"row":315,"column":0},"action":"insert","lines":["",""]},{"start":{"row":335,"column":0},"end":{"row":336,"column":0},"action":"insert","lines":["",""]},{"start":{"row":348,"column":2},"end":{"row":349,"column":0},"action":"insert","lines":["",""]}]]},"ace":{"folds":[],"scrolltop":3860.5,"scrollleft":0,"selection":{"start":{"row":348,"column":2},"end":{"row":348,"column":2},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":320,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1512155800904,"hash":"fcfdefefac315ee07302651730decf0f89ded39f"}